name: CD Pipeline

on:
  workflow_run:
    workflows:
      - CI Pipeline
    types:
      - completed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      # Step 1: Download the artifact
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: spring-boot-app

      # Step 2: Set up JDK 20
      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'

      # Step 3: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest .

      # Step 4: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 5: Push Docker image
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest

      # Step 6: Save the private key to a .pem file
      - name: Save EC2 private key
        run: |
          echo "${{ secrets.EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # Step 7: Install Docker on EC2 (idempotent)
      - name: Install Docker on EC2
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{secrets.EC2_HOST}} << 'EOF'
          if ! [ -x "$(command -v docker)" ]; then
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          EOF

      # Step 8: Connect to EC2 and deploy the container
      - name: Deploy Docker container on EC2
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{secrets.EC2_HOST}} << 'EOF'
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest
          sudo docker stop spring-boot-app || true
          sudo docker rm spring-boot-app || true
          sudo docker run -d --name spring-boot-app -p 8080:8080 \
            -e AWS_ACCESS_KEY_ID="${{secrets.AWS_ACCESS_KEY_ID}}" \
            -e AWS_SECRET_ACCESS_KEY="${{secrets.AWS_SECRET_ACCESS_KEY}}" \
            -e AWS_SESSION_TOKEN="${{secrets.AWS_SESSION_TOKEN}}" \
            ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest
          EOF
