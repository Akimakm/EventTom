name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 20
      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'

      # Step: Add execute permission to mvnw
      - name: Fix permissions for mvnw
        run: chmod +x ./mvnw

      # Step 3: Build the application
      - name: Build the Spring Boot app
        run: ./mvnw clean package -DskipTests

      # Step 4: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest .

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 6: Push Docker image
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest

      # Step 7: Save the private key to a .pem file
      - name: Save EC2 private key
        run: |
          echo "${{ secrets.EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # Step 8: Install Docker on EC2 (idempotent)
      - name: Install Docker on EC2
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@98.84.147.53 << 'EOF'
          if ! [ -x "$(command -v docker)" ]; then
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          EOF

      # Step 9: Connect to EC2 and deploy the container
      - name: Deploy Docker container on EC2
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@98.84.147.53 << 'EOF'
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest
          sudo docker stop spring-boot-app || true
          sudo docker rm spring-boot-app || true
          sudo docker run -d --name spring-boot-app -p 8080:8080 \
            -e AWS_ACCESS_KEY_ID=ASIAU3X7GXWAIPDFZ7CJ \
            -e AWS_SECRET_ACCESS_KEY=ij+rU+PQupXiLhq0FNEuDFF4e9ix9tq54QXps0SH \
            -e AWS_SESSION_TOKEN=IQoJb3JpZ2luX2VjEIz//////////wEaCXVzLXdlc3QtMiJIMEYCIQCQDR+1VHMSJuV13E41QitwCBm9oq2GtbUE4BEksDJo/gIhAKCocGVln4sGGpeDPpWuLpVekr6PxymGf44/Q2UOuxfjKrUCCIX//////////wEQARoMMzM0NDY4OTIyNzUyIgzreK+LhxfNuw9k5x4qiQIWeLpyvjdgq5k+Rcdtf0D6CGaE4BYTFvRDBLYzZ0kD/9mWGjYyHsKpSgCYhFZBNHd0gNKM+msqcVfVzQM/B3cKcSZ5tmmFeg0flsdOhPQALo8wH0p+0BlPCZXu+wt8A6iCs8dyNdz2TXzHIZxzseSEE7mIEnShq52eRXDglD81mu/+i8N+gEFrKm7gLQCcbGqxF6bl6+lOMV2nb/BY4SQwnoyYzwCXSq/UI1X6Du1f4hm9YaOmVjqzO6M2gFHKHFwwyyv5pVVggb9JVccfPGRHni4DZ7BFtI7FAs9uKlmJ5+RRxUijhBeoGgx04b2ucQySnB+SKlD1MFOe2MYTBneIzqAeYhRLoELOMM3isbwGOpwBv25W+mczKn4q+tEOXt9i3fGs4+nM6JxAauCT3SS3QiVac2vGqPKCSMpA2cKbCrUE5Z2SWuIGCtQvjOQqvLZh3E8iw6MN3A70NgCL5+uWNeBqx049du4pwYu6dqr5Tf9SRIsv6sK3uaHSHyQxJ4qIwtJwh8JeuSbphZMIwKZSxy+j3s4m9lxluA0f3AN/3HEQCemZ2ht9ZxwgTZNA \
            akimakm53/spring-boot-app:latest
          EOF
