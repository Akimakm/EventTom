name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # Step 1: Tests Job
  tests:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 20
      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'

      # Step: Add execute permission to mvnw
      - name: Fix permissions for mvnw
        run: chmod +x ./mvnw

      # Step 3: Run Tests
      - name: Run Tests
        run: ./mvnw clean test

  # Step 2: Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: tests # Run this job only after the 'tests' job succeeds

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 20
      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'

      # Step: Add execute permission to mvnw
      - name: Fix permissions for mvnw
        run: chmod +x ./mvnw

      # Step 3: Build Application
      - name: Build Application
        run: ./mvnw clean package

      # Step 4: Upload Build Artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: spring-boot-app
          path: target/*.jar

  # Step 3: Deploy Job
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build # Run this job only after the 'build' job succeeds

    steps:
      # Step 1: Download the artifact from the build job
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: spring-boot-app

      # Step 2: Check contents of current directory
      - name: Verify Files
        run: ls -al

      # Step 2: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest .

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 4: Push Docker image to Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest

      # Step 5: Save the private key to a .pem file
      - name: Save EC2 private key
        run: |
          echo "${{ secrets.EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # Step 6: Install Docker on EC2 (idempotent)
      - name: Install Docker on EC2
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{secrets.EC2_HOST}} << 'EOF'
          if ! [ -x "$(command -v docker)" ]; then
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          EOF

      # Step 7: Connect to EC2 and deploy the container
      - name: Deploy Docker container on EC2
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{secrets.EC2_HOST}} << 'EOF'
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest
          sudo docker stop spring-boot-app || true
          sudo docker rm spring-boot-app || true
          sudo docker run -d --name spring-boot-app -p 8080:8080 \
            -e AWS_ACCESS_KEY_ID="${{secrets.AWS_ACCESS_KEY_ID}}" \
            -e AWS_SECRET_ACCESS_KEY="${{secrets.AWS_SECRET_ACCESS_KEY}}" \
            -e AWS_SESSION_TOKEN="${{secrets.AWS_SESSION_TOKEN}}" \
            ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest
          EOF
